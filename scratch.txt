kubeadm init \
--apiserver-advertise-address=192.168.1.21 \
--kubernetes-version=v1.29.0 \
--pod-network-cidr=10.244.0.0/16

kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker=worker

kubectl create -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/crds.yaml
kubectl create -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/olm.yaml

Apply CNI > Wait for dns pods 
Add workers + Label > Verify CNI pods

Add Argocd with startup applications.

firewall-cmd --zone=trusted --permanent --add-rich-rule="rule family='ipv4' source address='10.0.0.0/21' destination address='1.2.3.4' forward-port port='80' protocol='tcp' to-addr='10.0.2.9'"

firewall-cmd --zone=trusted --permanent --add-rich-rule="rule family='ipv4' source address='10.0.0.0/21' destination address='1.2.3.4' forward-port port='80' protocol='tcp' to-addr='10.0.2.9'"

kubectl taint node <master-node> node-role.kubernetes.io/control-plane:NoSchedule-

cat config.backup | yq '.clusters.[0].cluster.certificate-authority-data'
cat config.backup | yq '.clusters.[0].cluster.server'

kubectl create secret generic keycloak-db-secret -n keycloak \
  --from-literal=username=kc-user \
  --from-literal=password=helloworld


KEYCLOAK_URL=https://keycloak.lab.nicholasburr.com &&
echo "" &&
echo "Keycloak:                 $KEYCLOAK_URL" &&
echo "Keycloak Admin Console:   $KEYCLOAK_URL/admin" &&
echo "Keycloak Account Console: $KEYCLOAK_URL/realms/myrealm/account" &&
echo ""s

_named_conf.backup_file

--oidc-issuer-url	URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme are accepted. This is typically the provider's discovery URL, changed to have an empty path	If the issuer's OIDC discovery URL is https://accounts.provider.example/.well-known/openid-configuration, the value should be https://accounts.provider.example	Yes
--oidc-client-id	A client id that all tokens must be issued for.	kubernetes	Yes
--oidc-username-claim	JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.	sub	No
--oidc-username-prefix	Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.	oidc:	No
--oidc-groups-claim	JWT claim to use as the user's group. If the claim is present it must be an array of strings.	groups	No
--oidc-groups-prefix	Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.	oidc:	No
--oidc-required-claim	A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present in the ID Token with a matching value. Repeat this flag to specify multiple claims.	claim=value	No
--oidc-ca-file	The path to the certificate for the CA that signed your identity provider's web certificate. Defaults to the host's root CAs.	/etc/kubernetes/ssl/kc-ca.pem	No
--oidc-signing-algs	The signing algorithms accepted. Default is "RS256".

--oidc-issuer-url=https://keycloak.lab.nicholasburr.com/auth/realms/master
--oidc-groups-claim=groups
--oidc-groups-prefix='keycloak:'
--oidc-client-id=kubernetes
--oidc-username-claim=email


